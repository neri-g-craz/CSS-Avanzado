:root{ 
    /* 
    Enfoque de diseño basado en sistemas para establecer reglas y patrones escalables y reutilizables.
    Se personalizan variables para acceder a cualquier valor de una propiedad mediante la pseudoclase ":root" con la sintaxis --nombre-variable 
    */
    /* --nombre-variable */
    --font-primary: 'Montserrat', sans-serif;
    --color-primary: #A60825;
    --color-background: #F2955E;
    --color-secondary: #93A64E;
    --color-text-primary: #D9CCB4;
    --color-text-secondary: #D98E04;
    --color-light: #F2F2F2;
    --color-dark: #070C26;
}
body{
    background-color: var(--color-background);
    color: var(--color-light);
    font-family: var(--font-primary);
}


.position{
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
}

/* La posición estaática es la posición por default del html, no se afecta por margin de ningún */


#static{
    position: static;
    top: 20px;
    bottom: 20px;
    left: 20px;
    right: 20px;
    background-color: var(--color-text-secondary);
}
/* Es posicionado de forma relativa al elemento anterior o posición original y si permite movimiento mediante propiedades top, bottom, left, right */
#relative{
    position: relative;
    top: 2000px;
    bottom: 20px;
    left: 20px;
    right: 20px;
    background-color: var(--color-primary);
}
#absolute{
    position: absolute;
    top: 20px;
    left: 20px;
    background-color: var(--color-light);
    color: var(--color-dark);
}
/* Nos permite mantener el elemento fijo en el viewport */
#fixed {
    left: 300px;
    top: 400px;
    position:fixed;
    background-color: cadetblue;
}
#waicon{
    width: 100%;
    }
#chat{
    /* border: solid var(--color-light) 1px; */
    position: fixed;
    top: 520px;
    left: 520px;
    width: 3em;
    height: 3em;
}
.display-inline{
    width: 100px;
    height: 100px;
    background-color: var(--color-text-primary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;
}
.display-block{
    /* display: block; */
    display: inline-block;
    width: 100px;
    height: 100px;
    background-color: var(--color-secondary);
    text-align: center;
    margin: 2px;
}
#display-1, #display-2 {
    display: inline;
}
.display-none{
    display: none;
}
/* Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro, El flexbox se aplica en el container y tiene efecto sobre los hijos. Por default, la dirección de flex es en filas (row).
Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
    > - flex-direction: column, column-reverse, row, row-reverse 
    > - flex-wrap: wrap, nowrap, > -wrap-reverse
    > - justify-content: center, flex-start, flex-end, space between, space-around
    > - align-item: start, end, center
    > - align-self: flex-start, flex-end
    */
.container{
    display: flex;
    flex-direction: row;    
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: start;
    width: auto;
    background-color: var(--color-text-secondary);
    height: 250px;
    margin: 10px;
    border-radius: 10px;
    padding: 15px;
}
.display-flex{
    width: 100px;
    background-color: var(--color-background);
    height: 80px;
    margin: 5px;
    border-radius: 6px;
    padding: 2px;
    text-align: center;
}

#item-6{
    align-self: center;
}
a{
    text-decoration: none;
    color: var(--color-light);
}
/* Grid layout 
Elementos de una cuadricula grid: contenedor, itemd, celdas, area
display: grid;
*/
.display-grid{
    background-color: var(--color-text-secondary);
    border-radius: 3px;
    padding: 20px;
    text-align: center;
    border: solid var(--color-text-primary) 1px;
}
.grid {
    display: grid;
    grid-template-columns: auto auto;
    /* grid-template-rows: auto auto auto auto; */
    gap: 10px;
    padding: 10px;
}
.container-1{
    display: grid;
    grid-template-columns: repeat(3,1fr);
    grid-template-rows: 1fr 2fr 2fr 1fr;
    grid-template-areas: 
        "head" "head" "head"
        "aside" "section""section"
        "aside" "article" "article"
        "footer" "footer" "footer"


    ;
    width: auto;
    height: 500px;
    border solid var(--color-text-primary) 0.7px;
    text-align: center;
    margin:10px;
    font-size: 10px;
}
header {
    background-color: darkgreen;
    grid-area: head;
}
nav{
    background-color: darkslategray;
    grid-area: nav;
}
article{
    background-color: dodgerblue;
    grid-area: article;
}
aside{
    background-color: seagreen;
    grid-area: aside;
}
section{
    background-color: peru;
    grid-area: section;
}
footer{
    background-color: deepskyblue;
    grid-area: footer;
}